/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.scratchjrexporter;

import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Dr
 */
public class MainWindow extends javax.swing.JFrame {

    private final DefaultListModel projectsListModel = new DefaultListModel();
    private SqlConnector connector;
    private String selectedOutputFilePath;
    private String selectedInputFilePath;
    private String selectedImportOutputFilePath;
    private String selectedImportInputFilePath;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.setLocationRelativeTo(null);
        jProjectsList.setModel(projectsListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        browseInputButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jInputFilePathTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jProjectsList = new javax.swing.JList<>();
        jExportSelectedProjectsButton = new javax.swing.JButton();
        browseOutputButton = new javax.swing.JButton();
        jOutputFilePathTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        browseImportInputButton = new javax.swing.JButton();
        jImportInputFilePathTextField = new javax.swing.JTextField();
        browseImportOutputButton = new javax.swing.JButton();
        jImportOutputFilePathTextField = new javax.swing.JTextField();
        jImportProjectsButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaDonationsText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        browseInputButton.setText("Browse");
        browseInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInputButtonActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(2);
        jTextArea1.setText("Select the \"scratchjr.sqllite\" used by ScratchJr-dekstop usually located in \"C:\\Users\\<User>\\Documents\\ScratchJR\" folder.\nThen select one or more projects to export, select the outputfile to export to and finally click \"Export selected projects\".");
        jScrollPane1.setViewportView(jTextArea1);

        jInputFilePathTextField.setEditable(false);
        jInputFilePathTextField.setText("select scratchjr.sqllite");
        jInputFilePathTextField.setToolTipText("select scratchjr.sqllite");

        jLabel1.setText("How to use");

        jProjectsList.setMinimumSize(new java.awt.Dimension(600, 400));
        jScrollPane2.setViewportView(jProjectsList);

        jExportSelectedProjectsButton.setText("Export selected projects");
        jExportSelectedProjectsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExportSelectedProjectsButtonActionPerformed(evt);
            }
        });

        browseOutputButton.setText("Browse");
        browseOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputButtonActionPerformed(evt);
            }
        });

        jOutputFilePathTextField.setEditable(false);
        jOutputFilePathTextField.setText("select output file");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(browseInputButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jInputFilePathTextField))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jExportSelectedProjectsButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(browseOutputButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jOutputFilePathTextField)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseInputButton)
                    .addComponent(jInputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseOutputButton)
                    .addComponent(jOutputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jExportSelectedProjectsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Export to mobile", jPanel1);

        browseImportInputButton.setText("Browse");
        browseImportInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseImportInputButtonActionPerformed(evt);
            }
        });

        jImportInputFilePathTextField.setEditable(false);
        jImportInputFilePathTextField.setText("select SJR file");
        jImportInputFilePathTextField.setToolTipText("select scratchjr.sqllite");

        browseImportOutputButton.setText("Browse");
        browseImportOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseImportOutputButtonActionPerformed(evt);
            }
        });

        jImportOutputFilePathTextField.setEditable(false);
        jImportOutputFilePathTextField.setText("select scratchjr.sqllite");

        jImportProjectsButton.setText("Export selected projects");
        jImportProjectsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jImportProjectsButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("How to use");

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(2);
        jTextArea2.setText("Select a SJR project to import\nSelect the \"scratchjr.sqllite\" to export to used by ScratchJr-dekstop usually located in \"C:\\Users\\<User>\\Documents\\ScratchJR\" folder\nFinally click \"Export selected projects\".");
        jScrollPane4.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(browseImportInputButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jImportInputFilePathTextField))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jImportProjectsButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(browseImportOutputButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jImportOutputFilePathTextField))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseImportInputButton)
                    .addComponent(jImportInputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseImportOutputButton)
                    .addComponent(jImportOutputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jImportProjectsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Export to desktop", jPanel2);

        jTextAreaDonationsText.setEditable(false);
        jTextAreaDonationsText.setColumns(20);
        jTextAreaDonationsText.setRows(5);
        jTextAreaDonationsText.setText("Support this exporter Application\n\nThank you for using the ScratchJrExporter application! \nThis project is open-source and maintained by the community. \nIf you find this tool useful, please consider making a donation to support its development and \nmaintenance.\n\nYour contributions help keep this project alive and allow us to continue improving it.\n\nDonate via PayPal: https://www.paypal.com/donate/?hosted_button_id=3LSPVQ5QRHA5E");
        jScrollPane5.setViewportView(jTextAreaDonationsText);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Donations", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseInputButtonActionPerformed
        // Create a JFileChooser instance
        JFileChooser fileChooser = new JFileChooser();

        // Set the dialog title (optional)
        fileChooser.setDialogTitle("Select a scratchjr.sqllite file");

        // Show the Open dialog and capture the return value
        int returnValue = fileChooser.showOpenDialog(null);

        // If a file is selected
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            try {
                // Get the selected file's path
                selectedInputFilePath = fileChooser.getSelectedFile().getAbsolutePath();

                // Display the selected file path in the text field
                jInputFilePathTextField.setText(selectedInputFilePath);

                readDabase(selectedInputFilePath);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "An error occurred while reading the database:\n" + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_browseInputButtonActionPerformed

    private void readDabase(String path) throws Exception {
        connector = new SqlConnector("jdbc:sqlite:" + path);

        SqlProjectsParser projectsParser = new SqlProjectsParser(connector);

        projectsListModel.removeAllElements();
        projectsListModel.addAll(projectsParser.getProjects());
    }

    private void jExportSelectedProjectsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportSelectedProjectsButtonActionPerformed
        if (selectedInputFilePath == null || selectedInputFilePath.isBlank()) {
            JOptionPane.showMessageDialog(this,
                    "Select the input \"scratchjr.sqllite\" file before continuing",
                    "No output file selected",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        List<SqlProjectData> selectedProjects = jProjectsList.getSelectedValuesList();
        if (selectedProjects == null || selectedProjects.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Select a project to export from the list before continuing",
                    "No projects selected",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (selectedOutputFilePath == null || selectedOutputFilePath.isBlank()) {
            JOptionPane.showMessageDialog(this,
                    "Select the output file to export to before continuing",
                    "No output file selected",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {
            ZipFileCreator z = new ZipFileCreator(connector);
            z.createExportFile(selectedOutputFilePath, selectedProjects);
            JOptionPane.showMessageDialog(this,
                    "Export finished successfully!",
                    "Export",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "An error occurred while exporting the database:\n" + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jExportSelectedProjectsButtonActionPerformed

    private void browseOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputButtonActionPerformed
        // Create a JFileChooser instance
        JFileChooser fileChooser = new JFileChooser();

        // Set the dialog title (optional)
        fileChooser.setDialogTitle("Select export file");

        // Show the Open dialog and capture the return value
        int returnValue = fileChooser.showOpenDialog(null);

        // If a file is selected
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // Get the selected file's path
            selectedOutputFilePath = fileChooser.getSelectedFile().getAbsolutePath();
            // Display the selected file path in the text field
            jOutputFilePathTextField.setText(selectedOutputFilePath);
        }
    }//GEN-LAST:event_browseOutputButtonActionPerformed

    private void browseImportInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseImportInputButtonActionPerformed
        // Create a JFileChooser instance
        JFileChooser fileChooser = new JFileChooser();

        // Set the dialog title (optional)
        fileChooser.setDialogTitle("Select a ScratchJr sjr file");

        // Show the Open dialog and capture the return value
        int returnValue = fileChooser.showOpenDialog(null);

        // If a file is selected
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // Get the selected file's path
            selectedImportInputFilePath = fileChooser.getSelectedFile().getAbsolutePath();

            // Display the selected file path in the text field
            jImportInputFilePathTextField.setText(selectedImportInputFilePath);
        }
    }//GEN-LAST:event_browseImportInputButtonActionPerformed

    private void browseImportOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseImportOutputButtonActionPerformed
        // Create a JFileChooser instance
        JFileChooser fileChooser = new JFileChooser();

        // Set the dialog title (optional)
        fileChooser.setDialogTitle("Select scratchjr.sqllite file");

        // Show the Open dialog and capture the return value
        int returnValue = fileChooser.showOpenDialog(null);

        // If a file is selected
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // Get the selected file's path
            selectedImportOutputFilePath = fileChooser.getSelectedFile().getAbsolutePath();
            // Display the selected file path in the text field
            jImportOutputFilePathTextField.setText(selectedImportOutputFilePath);
        }
    }//GEN-LAST:event_browseImportOutputButtonActionPerformed

    private void jImportProjectsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jImportProjectsButtonActionPerformed
        if (selectedImportInputFilePath == null || selectedImportInputFilePath.isBlank()) {
            JOptionPane.showMessageDialog(this,
                    "Select the SJR input file to import before continuing",
                    "No output file selected",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (selectedImportOutputFilePath == null || selectedImportOutputFilePath.isBlank()) {
            JOptionPane.showMessageDialog(this,
                    "Select the output \"scratchjr.sqllite\" file before continuing",
                    "No output file selected",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        try {
            SqlConnector connector = new SqlConnector("jdbc:sqlite:" + selectedImportOutputFilePath);
            SjrExporter zr = new SjrExporter(selectedImportInputFilePath, connector);
            zr.importToDatabase();
            
            JOptionPane.showMessageDialog(this,
                    "Export finished successfully!",
                    "Export",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "An error occurred while exporting the database:\n" + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jImportProjectsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseImportInputButton;
    private javax.swing.JButton browseImportOutputButton;
    private javax.swing.JButton browseInputButton;
    private javax.swing.JButton browseOutputButton;
    private javax.swing.JButton jExportSelectedProjectsButton;
    private javax.swing.JTextField jImportInputFilePathTextField;
    private javax.swing.JTextField jImportOutputFilePathTextField;
    private javax.swing.JButton jImportProjectsButton;
    private javax.swing.JTextField jInputFilePathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jOutputFilePathTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JList<SqlProjectData> jProjectsList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextAreaDonationsText;
    // End of variables declaration//GEN-END:variables
}
